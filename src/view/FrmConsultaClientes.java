package view;

import controller.ClienteDao;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.ClienteBean;

/**
 *
 * @author Guilherme / Francisco
 */
public class FrmConsultaClientes extends javax.swing.JInternalFrame
        implements IOuvintesPadrao {

    private boolean booAddTable = true;
    public DefaultTableModel defaultTableModel;
    private static FrmConsultaClientes _instance = null;

    public static synchronized FrmConsultaClientes getInstance() {
        if (_instance == null) {
            _instance = new FrmConsultaClientes();
        }
        return _instance;
    }

    /**
     * Creates new form FrmConsultaClientes
     */
    private FrmConsultaClientes() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblBusca = new javax.swing.JLabel();
        lblTermosBusca = new javax.swing.JLabel();
        cmbBusca = new javax.swing.JComboBox();
        txtTermosBusca = new javax.swing.JTextField();
        btnConsultar = new javax.swing.JButton();
        cmbTermosBusca = new javax.swing.JComboBox();
        scpConsulta = new javax.swing.JScrollPane();
        tabConsulta = new javax.swing.JTable();

        setBackground(new java.awt.Color(254, 254, 204));
        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Consultar Clientes");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        lblBusca.setText("Buscar por:");

        lblTermosBusca.setText("Digite os termos:");

        cmbBusca.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nome", "Telefone", "Celular", "Data de Cadastro" }));
        cmbBusca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbBuscaActionPerformed(evt);
            }
        });

        txtTermosBusca.setToolTipText("Separe os termos de busca por ','");

        btnConsultar.setFont(new java.awt.Font("Tahoma", 1, 14));
        btnConsultar.setText("CONSULTAR");

        cmbTermosBusca.setEnabled(false);

        tabConsulta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "", "", "", "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scpConsulta.setViewportView(tabConsulta);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnConsultar, javax.swing.GroupLayout.DEFAULT_SIZE, 661, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblBusca)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbTermosBusca, 0, 112, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTermosBusca)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTermosBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scpConsulta, javax.swing.GroupLayout.DEFAULT_SIZE, 661, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBusca)
                    .addComponent(cmbBusca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTermosBusca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTermosBusca)
                    .addComponent(cmbTermosBusca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnConsultar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scpConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        _instance = null;
        setVisible(false);
    }//GEN-LAST:event_formInternalFrameClosing

    private void cmbBuscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbBuscaActionPerformed
        DefaultComboBoxModel dcm = new DefaultComboBoxModel();
        if (cmbBusca.getSelectedIndex() != 3) {
            dcm.addElement("Igual a");
            dcm.addElement("Comeca com");
            dcm.addElement("Contem");
            dcm.addElement("Termina com");
        } else {
            dcm.addElement("Na data");
            dcm.addElement("Apos data");
            dcm.addElement("Antes da data");
            dcm.addElement("Entre datas");
        }
        cmbTermosBusca.setModel(dcm);
        cmbTermosBusca.setSelectedIndex(0);
        cmbTermosBusca.setEnabled(true);
    }//GEN-LAST:event_cmbBuscaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmConsultaClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmConsultaClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmConsultaClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmConsultaClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new FrmConsultaClientes().setVisible(true);
            }
        });
    }

    /**
     * Método para auxiliar na montagem da query de pesquisa
     * 
     * @return Um array de String contendo informações como 'nome da tabela', 
     * 'filtro' e afins
     */
    public String[] getQueryItems() {
        String[] strQueryStrings = new String[3];

        int intCampo = cmbBusca.getSelectedIndex();
        int intTipo = cmbTermosBusca.getSelectedIndex();
        if (intCampo < 3) {
            switch (intCampo) {
                case 0:
                    strQueryStrings[0] = "NomeCliente";
                    break;
                case 1:
                    strQueryStrings[0] = "FoneCliente";
                    break;
                case 2:
                    strQueryStrings[0] = "CelCliente";
                    break;
            }
            strQueryStrings[1] = "LIKE";
        } else if (intCampo == 3) {
            strQueryStrings[0] = "DataCadastroCliente";
            if(intTipo == 0) {
                strQueryStrings[1] = "=";
            } else if (intTipo == 1) {
                strQueryStrings[1] = ">=";
            } else if (intTipo == 2) {
                strQueryStrings[1] = "<=";
            } else {
                strQueryStrings[1] = "AND";
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione um campo para "
                    + "pesquisar!", "Erro na pesquisa",
                    JOptionPane.ERROR_MESSAGE);
        }
        
        //for (int i = 0, j = 2; txtTermosBusca.getText().substring(i).contains(","
          //      ); i = txtTermosBusca.getText().substring(i).indexOf(",")) {
        int j = 2;    
        //strQueryStrings[j] = "'";
            if (intCampo < 3 && (intTipo == 3 || intTipo == 2)) {
                strQueryStrings[j] += "%";
            }
            /*strQueryStrings[j] += txtTermosBusca.getText().substring(i,
                    txtTermosBusca.getText().substring(i).indexOf(","));
            j = txtTermosBusca.getText().substring(i).indexOf(",");*/
            strQueryStrings[j] += txtTermosBusca.getText();
            if (intCampo < 3 && (intTipo == 2 || intTipo == 1)) {
                strQueryStrings[j] += "%";
            }
            //strQueryStrings[j] += "'";
        //}

        return strQueryStrings;
    }

    public void atualizaTable(ArrayList<ClienteBean> clientes) {
        for (int i = 0; i < defaultTableModel.getRowCount(); i++) {
            defaultTableModel.removeRow(i);
        }
        for (int i = 0; i < clientes.size(); i++) {
            Object[] o = {
                clientes.get(i).getCodigo(),
                clientes.get(i).getNome(),
                clientes.get(i).getDataCadastro(),
                clientes.get(i).getTelefone(),
                clientes.get(i).getCelular()
            };
            defaultTableModel.addRow(o);
        }
        atualizaTable();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConsultar;
    private javax.swing.JComboBox cmbBusca;
    private javax.swing.JComboBox cmbTermosBusca;
    private javax.swing.JLabel lblBusca;
    private javax.swing.JLabel lblTermosBusca;
    private javax.swing.JScrollPane scpConsulta;
    private javax.swing.JTable tabConsulta;
    private javax.swing.JTextField txtTermosBusca;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setActionListener(ActionListener al) {
        btnConsultar.addActionListener(al);
        btnConsultar.setActionCommand("Consultar");
    }

    public void atualizaTable() {
        if (booAddTable) {
            tabConsulta.setModel(defaultTableModel);
            booAddTable = false;
        }
    }

    public void begin() {
        defaultTableModel = new DefaultTableModel() {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        defaultTableModel.addColumn("ID");
        defaultTableModel.addColumn("Nome");
        defaultTableModel.addColumn("Cadastrado:");
        defaultTableModel.addColumn("Telefone");
        defaultTableModel.addColumn("Celular");

        try {
            ClienteDao dao = new ClienteDao();
            ArrayList<ClienteBean> clientes = dao.pesquisar();
            for (int i = 0; i < clientes.size(); i++) {
                Object[] o = {
                    clientes.get(i).getCodigo(),
                    clientes.get(i).getNome(),
                    clientes.get(i).getDataCadastro(),
                    clientes.get(i).getTelefone(),
                    clientes.get(i).getCelular()
                };
                defaultTableModel.addRow(o);
            }
            atualizaTable();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmCadastroCliente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(FrmCadastroCliente.class.getName()).log(Level.SEVERE, null, ex);
        }

        cmbBusca.setSelectedIndex(0);
    }
}
